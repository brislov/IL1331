library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.CPU_package.all;


entity Controller is
	port( 
		adr      : out address_bus; -- unsigned
		data     : in program_word; -- unsigned
		rw_RWM   : out std_logic;   -- read on high
		RWM_en   : out std_logic;   -- active low
		ROM_en   : out std_logic;   -- active low
		clk      : in std_logic;
		reset    : in std_logic;    -- active high
		rw_reg   : out std_logic;   -- read on high
		sel_op_1 : out unsigned(1 downto 0);
		sel_op_0 : out unsigned(1 downto 0);
		sel_in   : out unsigned(1 downto 0);
		sel_mux  : out unsigned(1 downto 0);
		alu_op   : out unsigned(2 downto 0);
		alu_en   : out std_logic;   -- active high
		z_flag   : in std_logic;    -- active high
		n_flag   : in std_logic;    -- active high
		o_flag   : in std_logic;    -- active high
		out_en   : out std_logic;   -- active high
		data_imm : out data_word;   -- signed
		step     : in std_logic
	); 
end entity;


architecture RTL of Controller is

	component Nibble_Counter is
		port(
			clk      : in std_logic;
			reset    : in std_logic; -- active on high
			load_en  : in std_logic; -- active on high
			load_val : in unsigned(operation_size-1 downto 0);
			step     : in std_logic;
			curr_val : out unsigned(operation_size-1 downto 0)
		);
	end component;
	
	-- instruction signal which gets its value from data 
	signal instr : std_logic_vector(instruction_size-1 downto 0);
	
	-- partioning of instr signal 
	alias op : std_logic_vector(2 downto 0) is instr(8 downto 6);
	alias r1 : std_logic_vector(1 downto 0) is instr(5 downto 4);
	alias r2 : std_logic_vector(1 downto 0) is instr(3 downto 2);
	alias r3 : std_logic_vector(1 downto 0) is instr(1 downto 0);
	alias mem : std_logic_vector(3 downto 0) is instr(3 downto 0);
	
	signal PC_load_en  : std_logic;
	signal PC_load_val : unsigned(operation_size-1 downto 0);
	signal PC_curr_val : unsigned(operation_size-1 downto 0);
	
begin
	
	PC : Nibble_Counter port map(clk, reset, PC_load_en, PC_load_val, step, PC_curr_val);
	
	process(clk)
	begin
		if rising_edge(clk) then
		
		
		
		end if;
	end process;
	
end architecture;
